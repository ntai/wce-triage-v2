
from wce_triage.components.network import *
import sys, os

indentspace = '  '

class Printer:
  def __init__(self, output):
    self.output = output
    pass

  def print_tree(self, tree, ilevel):
    for elem in tree:
      if isinstance(elem, list):
        self.print_tree( elem, ilevel + 1)
      elif isinstance(elem, dict):
        for key, value in elem.items():
          if isinstance(value, list):
            print( "{indent}{key}:".format(indent=indentspace*ilevel, key=key), file=self.output )
            self.print_tree(value, ilevel+1)
          else:
            print( "{indent}{key}: {value}".format(indent=indentspace*ilevel, key=key, value=value), file=self.output)
            pass
          pass
        pass
      else:
        print(elem, file=self.output)
        pass
      pass
    pass
  pass
      

# Create netplan.yaml file 
def create_netplan_cfg(filename, devices):
  ethernets = []
  wifis = []
  bonds = []

  
  WCE_SERVER = os.environ.get('WCE_SERVER', 'false')

  SSID = os.environ.get('TRIAGE_SSID', 'wcetriage')
  WIFIPASSWORD = os.environ.get('TRIAGE_PASSWORD', 'thepasswordiswcetriage')

  for dev in devices:
    if dev.device_type == NetworkDeviceType.Ethernet:
      ethernets.append( { dev.device_name: [ { 'dhcp4': 'yes' }, { 'optional': 'yes' } ] } )
    elif dev.device_type == NetworkDeviceType.Wifi:
      # netplan works with wpa-supplicant, generates a simple config file
      # in the same directory and hands off the auth.
      if len(WIFIPASSWORD) > 0:
        ap_param = [ { 'password': WIFIPASSWORD } ]
      else:
        ap_param = '{}'
        pass
      wifis.append( { dev.device_name:
                      [ { 'dhcp4': 'yes' },
                        { 'optional': 'yes' },
                        { 'access-points':
                          [ { SSID: ap_param } ] } ] } )
      pass
    pass

  ifdecl = [ {'version': '2' },
             {'renderer': 'networkd' } ]

  if WCE_SERVER == "true":
    if len(ethernets) >= 2:
      for eth in ethernets:
        devname = list(eth.keys())[0]
        eth[devname][0]['dhcp4'] = 'no'
        pass

      bond0 = { "bond0":
                [
                  {
                    "interfaces": " [ " + ",".join([list(eth.keys())[0] for eth in ethernets]) + " ]",
                    "addresses": "[10.3.2.1/24]"
                    # "nameservers": [ { "addresses": "[127.0.0.53]" } ]
                    }
                ]
      }
      bonds.append(bond0)
      pass
    else:
      for eth in ethernets:
        devname = list(eth.keys())[0]
        eth[devname][0]['dhcp4'] = 'no'
        eth[devname][0]['addresses'] = "[10.3.2.1/24] "
        # eth[devname][0]['nameservers'] = [ { "addresses": "[127.0.0.53]" } ]
        pass
      pass
    pass

  if ethernets:
    ifdecl.append( {'ethernets': ethernets } )
    pass
  if bonds:
    ifdecl.append( {'bonds': bonds })
    pass
  if wifis:
    ifdecl.append( {'wifis': wifis} )
    pass

  netplan = [ '# This file is auto-generated by wce triage lib/netplan.py.',
              {"network": ''},
              ifdecl ]

  if filename:
    output = open(filename, "w")
  else:
    output = sys.stdout
    pass

  printer = Printer( output )
  printer.print_tree(netplan, 0)
  pass


if __name__ == "__main__":
  os.environ['WCE_SERVER'] = 'false'
  eth0 = NetworkDevice("eth0", device_type=NetworkDeviceType.Ethernet)
  eth1 = NetworkDevice("eth1", device_type=NetworkDeviceType.Ethernet)
  create_netplan_cfg(None, [eth0, eth1])

  os.environ['WCE_SERVER'] = 'true'
  eth0 = NetworkDevice("eth0", device_type=NetworkDeviceType.Ethernet)
  eth1 = NetworkDevice("eth1", device_type=NetworkDeviceType.Ethernet)
  create_netplan_cfg(None, [eth0, eth1])

  create_netplan_cfg(None, [eth0])

  pass
